import React, { useRef, useState, useEffect } from 'react';
import * as htmlToImage from 'html-to-image';
import {
  DndContext,
  closestCenter,
  KeyboardSensor,
  PointerSensor,
  useSensor,
  useSensors,
} from '@dnd-kit/core';
import {
  arrayMove,
  SortableContext,
  sortableKeyboardCoordinates,
  useSortable,
  verticalListSortingStrategy,
} from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';

// Sortable item component
const SortableRow = ({ id, keyName, value, bgColor, onRemove }) => {
  const { attributes, listeners, setNodeRef, transform, transition, isDragging } = useSortable({ id });

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
    backgroundColor: bgColor,
    opacity: isDragging ? 0.8 : 1,
    boxShadow: isDragging ? '0 0 10px rgba(0,0,0,0.2)' : 'none',
  };

  return (
    <tr ref={setNodeRef} style={style}>
      <td className="p-3 border border-gray-200 font-medium" style={{ width: '40%' }}>
        {keyName}
      </td>
      <td className="p-3 border border-gray-200 relative" style={{ width: '60%' }}>
        <div className="flex justify-between items-center">
          <div className="pr-16">{value}</div>
          <div className="controls-container absolute right-2 top-1/2 transform -translate-y-1/2 flex items-center space-x-2">
            <button
              onClick={() => onRemove(id)}
              className="remove-button flex items-center justify-center w-6 h-6 text-red-400 hover:text-red-600 hover:bg-red-50 rounded-full transition-colors duration-200"
              title="Remove item"
              aria-label="Remove item"
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
            <div
              {...attributes}
              {...listeners}
              className="drag-handle flex items-center justify-center w-6 h-6 text-gray-400 hover:text-gray-600 hover:bg-gray-50 rounded-full cursor-grab active:cursor-grabbing transition-colors duration-200"
              title="Drag to reorder"
              aria-label="Drag to reorder"
            >
              <div className="grid grid-cols-2 gap-0.5">
                <div className="w-1 h-1 rounded-full bg-current"></div>
                <div className="w-1 h-1 rounded-full bg-current"></div>
                <div className="w-1 h-1 rounded-full bg-current"></div>
                <div className="w-1 h-1 rounded-full bg-current"></div>
                <div className="w-1 h-1 rounded-full bg-current"></div>
                <div className="w-1 h-1 rounded-full bg-current"></div>
              </div>
            </div>
          </div>
        </div>
      </td>
    </tr>
  );
};

const ImagePreview = ({ productDetails, detailsOrder, setDetailsOrder, setSelectedDetails, colorScheme, productImages = [], showProductImages = true }) => {
  const previewRef = useRef(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [downloadSuccess, setDownloadSuccess] = useState(false);
  const [processedDetails, setProcessedDetails] = useState({});
  const [orderedKeys, setOrderedKeys] = useState([]);
  const [removedItem, setRemovedItem] = useState(null);
  const [showUndo, setShowUndo] = useState(false);
  const [imageSize, setImageSize] = useState(100); // Default image size 100%
  const [showResizeControls, setShowResizeControls] = useState(false);
  const [imageLayout, setImageLayout] = useState('horizontal'); // 'horizontal', 'square', 'vertical'
  const [imageFit, setImageFit] = useState('contain'); // 'contain' or 'cover'
  const [currentImageIndex, setCurrentImageIndex] = useState(0); // Track current image for navigation

  // Set up DnD sensors
  const sensors = useSensors(
    useSensor(PointerSensor, {
      activationConstraint: {
        distance: 5, // Minimum drag distance before activation
      },
    }),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates,
    })
  );

  // Process the product details to combine Cut and Grade
  useEffect(() => {
    if (!productDetails || Object.keys(productDetails).length === 0) {
      setProcessedDetails({});
      setOrderedKeys([]);
      return;
    }

    const processed = { ...productDetails };

    // Rename Gemstone Type to Gemstone Name if it exists
    if (processed['Gemstone Type']) {
      processed['Gemstone Name'] = processed['Gemstone Type'];
      delete processed['Gemstone Type'];
    }
    // Also check for Gem Type
    else if (processed['Gem Type']) {
      processed['Gemstone Name'] = processed['Gem Type'];
      delete processed['Gem Type'];
    }

    // Rename Grade to Cut Grade
    if (processed['Grade'] && !processed['Cut Grade']) {
      processed['Cut Grade'] = processed['Grade'];
      delete processed['Grade'];
    }

    // Handle Size and Dimensions - if both exist, remove Dimensions
    const hasSize = Object.keys(processed).some(key =>
      key.toLowerCase() === 'size'
    );

    const hasDimensions = Object.keys(processed).some(key =>
      key.toLowerCase() === 'dimensions'
    );

    if (hasSize && hasDimensions) {
      // If both Size and Dimensions exist, remove Dimensions
      const dimensionsKey = Object.keys(processed).find(key =>
        key.toLowerCase() === 'dimensions'
      );
      if (dimensionsKey) {
        delete processed[dimensionsKey];
      }
    }

    // If Size exists, also remove Item Length, Item Width, and Item Depth
    if (hasSize) {
      const dimensionFieldsToRemove = Object.keys(processed).filter(key =>
        key.includes('Length') || key.includes('Width') || key.includes('Depth') ||
        key.includes('length') || key.includes('width') || key.includes('depth')
      );

      dimensionFieldsToRemove.forEach(key => delete processed[key]);
    }
    // Combine dimensions if they exist (only if Size doesn't exist)
    else {
      const dimensionKeys = Object.keys(processed).filter(key =>
        key.includes('Length') || key.includes('Width') || key.includes('Depth') ||
        key.includes('length') || key.includes('width') || key.includes('depth')
      );

      if (dimensionKeys.length > 1) {
        const dimensions = dimensionKeys.map(key => `${key}: ${processed[key]}`).join(', ');
        processed['Dimensions'] = dimensions;

        // Remove individual dimension fields
        dimensionKeys.forEach(key => delete processed[key]);
      }
    }

    setProcessedDetails(processed);

    // Use the provided detailsOrder if available, otherwise use the keys from processed details
    if (detailsOrder && detailsOrder.length > 0) {
      // Filter out any keys that don't exist in the processed details
      const validOrderedKeys = detailsOrder.filter(key => processed[key] !== undefined);

      // Add any keys that are in processed but not in detailsOrder
      const missingKeys = Object.keys(processed).filter(key => !validOrderedKeys.includes(key));

      setOrderedKeys([...validOrderedKeys, ...missingKeys]);
    } else {
      // Default ordering - prioritize Gemstone Name if it exists
      const keys = Object.keys(processed);
      const gemstoneNameIndex = keys.findIndex(key => key === 'Gemstone Name');

      if (gemstoneNameIndex !== -1) {
        const gemstoneNameKey = keys.splice(gemstoneNameIndex, 1)[0];
        setOrderedKeys([gemstoneNameKey, ...keys]);
      } else {
        setOrderedKeys(keys);
      }
    }
  }, [productDetails, detailsOrder]);

  // Handle removing an item
  const handleRemoveItem = (key) => {
    // Store the removed item for potential undo
    setRemovedItem({
      key,
      value: processedDetails[key],
      index: orderedKeys.indexOf(key)
    });

    // Update the ordered keys
    setOrderedKeys(prev => prev.filter(k => k !== key));

    // Update the selected details in the parent component
    // Only remove from selectedDetails, not from the original productDetails
    setSelectedDetails(prev => {
      const newDetails = { ...prev };
      delete newDetails[key];
      return newDetails;
    });

    // Update the details order in the parent component
    // This only affects the order, not the available items in the list
    setDetailsOrder(prev => prev.filter(k => k !== key));

    // Show the undo option
    setShowUndo(true);

    // Auto-hide the undo option after 5 seconds
    setTimeout(() => {
      setShowUndo(false);
      setRemovedItem(null);
    }, 5000);
  };

  // Handle undoing a removal
  const handleUndoRemove = () => {
    if (!removedItem) return;

    // Restore the item to its original position
    const newOrderedKeys = [...orderedKeys];
    newOrderedKeys.splice(removedItem.index, 0, removedItem.key);
    setOrderedKeys(newOrderedKeys);

    // Update the selected details in the parent component
    setSelectedDetails(prev => ({
      ...prev,
      [removedItem.key]: removedItem.value
    }));

    // Update the details order in the parent component
    const newDetailsOrder = [...detailsOrder];
    newDetailsOrder.splice(removedItem.index, 0, removedItem.key);
    setDetailsOrder(newDetailsOrder);

    // Hide the undo option
    setShowUndo(false);
    setRemovedItem(null);
  };

  const handleDownload = async () => {
    if (previewRef.current) {
      try {
        setIsGenerating(true);

        // Temporarily hide the resize controls for the download
        const resizeControls = document.querySelectorAll('.resize-control');
        resizeControls.forEach(control => {
          control.style.display = 'none';
        });

        // Generate the image
        const dataUrl = await htmlToImage.toPng(previewRef.current, {
          quality: 0.95,
          pixelRatio: 2, // Higher resolution
          filter: (node) => {
            // Filter out any resize controls that might be inside the container
            return !node.classList || !node.classList.contains('resize-control');
          }
        });
        
        // Restore resize controls after image generation
        resizeControls.forEach(control => {
          control.style.display = '';
        });

        // Create a download link

  // Handle drag end event
  const handleDragEnd = (event) => {
    const { active, over } = event;
    
    if (active.id !== over.id) {
      setOrderedKeys((items) => {
        const oldIndex = items.indexOf(active.id);
        const newIndex = items.indexOf(over.id);

        const newOrder = arrayMove(items, oldIndex, newIndex);

        // Update the details order in the parent component
        setDetailsOrder(newOrder);

        return newOrder;
      });
    }
  };
  
  // Handle image navigation
  const nextImage = () => {
    if (productImages.length <= 1) return;
    setCurrentImageIndex(prev => (prev < productImages.length - 1 ? prev + 1 : 0));
  };
  
  const prevImage = () => {
    if (productImages.length <= 1) return;
    setCurrentImageIndex(prev => (prev > 0 ? prev - 1 : productImages.length - 1));
  };
  
  // Reset current image index when product images change
  useEffect(() => {
    setCurrentImageIndex(0);
  }, [productImages]);

  if (!productDetails || Object.keys(productDetails).length === 0) {
    return (
      <div className="bg-white p-6 rounded-lg shadow-md h-full flex items-center justify-center transition-all duration-300 hover:shadow-lg">
        <div className="text-center">
          <svg className="w-16 h-16 mx-auto text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
          </svg>
          <p className="text-gray-500 text-center mt-4">
            Enter a product URL and customize details to see a preview here
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white p-6 rounded-lg shadow-md transition-all duration-300 hover:shadow-lg">
      <h2 className="text-xl font-semibold mb-4 flex items-center text-gray-800">
        <svg className="w-5 h-5 mr-2 text-green-600" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
          <path fillRule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clipRule="evenodd"></path>
        </svg>
        Image Preview
      </h2>

      {showUndo && removedItem && (
        <div className="mb-4 flex items-center justify-between p-2 bg-blue-50 border border-blue-100 rounded-md text-sm">
          <span className="text-blue-700">
            <span className="font-medium">{removedItem.key}</span> removed
          </span>
          <button
            onClick={handleUndoRemove}
            className="text-blue-600 hover:text-blue-800 font-medium flex items-center"
          >
            <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
            </svg>
            Undo
          </button>
        </div>
      )}

      <div className="mb-4 border rounded-lg overflow-hidden shadow-sm hover:shadow transition-all duration-300">
        <div
          ref={previewRef}
          className="w-full"
          style={{
            fontFamily: 'Arial, sans-serif',
            color: colorScheme.textColor,
          }}
        >
          {/* Product Images Section */}
          {showProductImages && productImages.length > 0 && (
            <div className="mb-2 relative">
              {/* Resize icon - positioned outside the previewRef container so it won't be included in downloads */}
              <div 
                className="absolute top-2 right-2 z-10 cursor-pointer bg-black bg-opacity-30 hover:bg-opacity-50 text-white p-1 rounded transition-all duration-200 resize-control"
                onClick={() => setShowResizeControls(!showResizeControls)}
                title="Resize images"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5v-4m0 4h-4m4 0l-5-5" />
                </svg>
              </div>
              
              {/* Enhanced resize controls panel */}
              {showResizeControls && (
                <div className="absolute top-10 right-2 z-20 bg-white shadow-lg rounded-md p-3 border border-gray-200 w-72 resize-control">
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-sm font-medium text-gray-700">Image Layout & Size</span>
                    <button 
                      onClick={() => setShowResizeControls(false)}
                      className="text-gray-400 hover:text-gray-600"
                    >
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
                      </svg>
                    </button>
                  </div>
                  
                  {/* Layout options */}
                  <div className="mb-3">
                    <label className="block text-sm font-medium text-gray-700 mb-1">Layout Format</label>
                    <div className="grid grid-cols-3 gap-2">
                      <button
                        onClick={() => setImageLayout('horizontal')}
                        className={`p-2 border rounded flex flex-col items-center ${imageLayout === 'horizontal' ? 'border-purple-500 bg-purple-50' : 'border-gray-200 hover:bg-gray-50'}`}
                      >
                        <div className="w-12 h-8 bg-gray-200 rounded mb-1"></div>
                        <span className="text-xs">Horizontal</span>
                      </button>
                      <button
                        onClick={() => setImageLayout('square')}
                        className={`p-2 border rounded flex flex-col items-center ${imageLayout === 'square' ? 'border-purple-500 bg-purple-50' : 'border-gray-200 hover:bg-gray-50'}`}
                      >
                        <div className="w-8 h-8 bg-gray-200 rounded mb-1"></div>
                        <span className="text-xs">Square</span>
                      </button>
                      <button
                        onClick={() => setImageLayout('vertical')}
                        className={`p-2 border rounded flex flex-col items-center ${imageLayout === 'vertical' ? 'border-purple-500 bg-purple-50' : 'border-gray-200 hover:bg-gray-50'}`}
                      >
                        <div className="w-8 h-10 bg-gray-200 rounded mb-1"></div>
                        <span className="text-xs">Vertical</span>
                      </button>
                    </div>
                  </div>
                  
                  {/* Size slider */}
                  <div className="mb-3">
                    <label className="block text-sm font-medium text-gray-700 mb-1">Size: {imageSize}%</label>
                    <input 
                      type="range" 
                      min="50" 
                      max="150" 
                      value={imageSize}
                      onChange={(e) => setImageSize(parseInt(e.target.value))}
                      className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
                    />
                  </div>
                  
                  {/* Image fit options */}
                  <div className="mb-3">
                    <label className="block text-sm font-medium text-gray-700 mb-1">Image Fit</label>
                    <div className="flex space-x-2">
                      <button
                        onClick={() => setImageFit('contain')}
                        className={`px-3 py-1 text-xs rounded-md flex-1 ${imageFit === 'contain' ? 'bg-purple-600 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}
                      >
                        Contain
                      </button>
                      <button
                        onClick={() => setImageFit('cover')}
                        className={`px-3 py-1 text-xs rounded-md flex-1 ${imageFit === 'cover' ? 'bg-purple-600 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}
                      >
                        Fill
                      </button>
                    </div>
                  </div>
                  
                  {/* Preset size buttons */}
                  <div className="flex space-x-2">
                    <button 
                      onClick={() => setImageSize(75)}
                      className={`px-2 py-1 text-xs rounded ${imageSize === 75 ? 'bg-purple-600 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}
                    >
                      Small
                    </button>
                    <button 
                      onClick={() => setImageSize(100)}
                      className={`px-2 py-1 text-xs rounded ${imageSize === 100 ? 'bg-purple-600 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}
                    >
                      Medium
                    </button>
                    <button 
                      onClick={() => setImageSize(125)}
                      className={`px-2 py-1 text-xs rounded ${imageSize === 125 ? 'bg-purple-600 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}
                    >
                      Large
                    </button>
                    <button 
                      onClick={() => {
                        setImageSize(100);
                        setImageLayout('horizontal');
                        setImageFit('contain');
                      }}
                      className="px-2 py-1 text-xs rounded bg-gray-200 text-gray-700 hover:bg-gray-300 ml-auto"
                    >
                      Reset
                    </button>
                  </div>
                </div>
              )}
              
              {/* Product Image Preview with Navigation */}
              <div className="mb-4">
                <div className="flex items-center justify-between mb-2">
                  <h3 className="text-lg font-medium text-gray-800 flex items-center">
                    <svg className="w-5 h-5 mr-2 text-blue-600" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                      <path fillRule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clipRule="evenodd"></path>
                    </svg>
                    Product Image Preview
                  </h3>
                  <div className="flex items-center">
                    <button 
                      onClick={() => setCurrentImageIndex(prev => (prev > 0 ? prev - 1 : productImages.length - 1))}
                      className="p-1 rounded-full bg-gray-200 hover:bg-gray-300 text-gray-700 mr-2 transition-all duration-200"
                      disabled={productImages.length <= 1}
                    >
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 19l-7-7 7-7"></path>
                      </svg>
                    </button>
                    <span className="text-sm text-gray-600 mr-1">
                      {productImages.length > 0 ? `${currentImageIndex + 1}/${productImages.length}` : '0/0'}
                    </span>
                    <button 
                      onClick={() => setCurrentImageIndex(prev => (prev < productImages.length - 1 ? prev + 1 : 0))}
                      className="p-1 rounded-full bg-gray-200 hover:bg-gray-300 text-gray-700 flex items-center transition-all duration-200"
                      disabled={productImages.length <= 1}
                    >
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7"></path>
                      </svg>
                      <span className="ml-1 text-sm font-medium">Next Preview</span>
                    </button>
                  </div>
                </div>
                
                {/* Current image display */}
                <div 
                  className="w-full border border-gray-200 bg-white overflow-hidden rounded-md shadow-sm"
                  style={{
                    aspectRatio: '16/9',
                    maxHeight: '250px',
                    transition: 'all 0.3s ease'
                  }}
                >
                  {productImages.length > 0 ? (
                    <img 
                      src={productImages[currentImageIndex]} 
                      alt={`Product preview ${currentImageIndex + 1}`} 
                      className={`w-full h-full transition-all duration-300 ${imageFit === 'contain' ? 'object-contain' : 'object-cover'}`}
                      style={{ 
                        transform: `scale(${imageSize / 100})`,
                        transformOrigin: 'center center'
                      }}
                    />
                  ) : (
                    <div className="w-full h-full flex items-center justify-center bg-gray-50">
                      <p className="text-gray-400">No product images available</p>
                    </div>
                  )}
                </div>
              </div>
              
              {/* Image container with fixed aspect ratio based on selected layout */}
              <div 
                className={`w-full mb-2 border border-gray-200 bg-white overflow-hidden rounded-md shadow-sm`}
                style={{
                  aspectRatio: imageLayout === 'horizontal' ? '16/9' : imageLayout === 'square' ? '1/1' : '9/16',
                  maxHeight: imageLayout === 'horizontal' ? '300px' : imageLayout === 'square' ? '400px' : '500px',
                  transition: 'all 0.3s ease'
                }}
              >
                <div className="flex h-full">
                  {/* Product image on the left */}
                  <div className="w-1/3 border-r border-gray-200 overflow-hidden flex items-center justify-center">
                    {productImages.length > 0 ? (
                      <img 
                        src={productImages[currentImageIndex]} 
                        alt={`Product image ${currentImageIndex + 1}`} 
                        className={`transition-all duration-300 ${imageFit === 'contain' ? 'object-contain' : 'object-cover'}`}
                        style={{ 
                          width: '100%',
                          height: '100%',
                          transform: `scale(${imageSize / 100})`,
                          transformOrigin: 'center center'
                        }}
                      />
                    ) : (
                      <div className="w-full h-full flex items-center justify-center bg-gray-50">
                        <p className="text-gray-400">No image</p>
                      </div>
                    )}
                  </div>
                  
                  {/* Product details preview on the right */}
                  <div className="w-2/3 overflow-auto">
                    <table className="w-full border-collapse">
                      <thead>
                        <tr>
                          <th
                            colSpan="2"
                            className="text-center p-2 font-bold text-md sticky top-0"
                            style={{ backgroundColor: colorScheme.headerBg, color: colorScheme.textColor }}
                          >
                            Product Details
                          </th>
                        </tr>
                      </thead>
                      <tbody>
                        {orderedKeys.slice(0, 6).map((key, index) => (
                          <tr key={key} style={{ backgroundColor: index % 2 === 0 ? colorScheme.rowBg : colorScheme.altRowBg }}>
                            <td className="p-2 border border-gray-200 font-medium" style={{ width: '40%' }}>
                              {key}
                            </td>
                            <td className="p-2 border border-gray-200" style={{ width: '60%' }}>
                              {processedDetails[key]}
                            </td>
                          </tr>
                        ))}
                        {orderedKeys.length > 6 && (
                          <tr>
                            <td colSpan="2" className="p-1 text-center text-xs text-gray-500">
                              +{orderedKeys.length - 6} more details
                            </td>
                          </tr>
                        )}
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
          )}
          
          <table className="w-full border-collapse">
            <thead>
              <tr>
                <th
                  colSpan="2"
                  className="text-center p-3 font-bold text-lg"
                  style={{ backgroundColor: colorScheme.headerBg, color: colorScheme.textColor }}
                >
                  Product Details
                </th>
              </tr>
            </thead>
            <DndContext
              sensors={sensors}
              collisionDetection={closestCenter}
              onDragEnd={handleDragEnd}
            >
              <SortableContext
                items={orderedKeys}
                strategy={verticalListSortingStrategy}
              >
                <tbody>
                  {orderedKeys.map((key, index) => (
                    <SortableRow
                      key={key}
                      id={key}
                      keyName={key}
                      value={processedDetails[key]}
                      bgColor={index % 2 === 0 ? colorScheme.rowBg : colorScheme.altRowBg}
                      onRemove={handleRemoveItem}
                    />
                  ))}
                </tbody>
              </SortableContext>
            </DndContext>
          </table>
        </div>
      </div>

      <button
        onClick={handleDownload}
        disabled={isGenerating || orderedKeys.length === 0}
        className={`w-full py-3 px-4 bg-green-600 hover:bg-green-700 text-white font-medium rounded-md shadow-sm 
          focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2
          transition-all duration-200 transform hover:scale-[1.02] active:scale-[0.98]
          ${(isGenerating || orderedKeys.length === 0) ? 'opacity-70 cursor-not-allowed' : ''}
          ${downloadSuccess ? 'bg-green-500' : ''}`}
      >
        {isGenerating ? (
          <span className="flex items-center justify-center">
            <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Generating Image...
          </span>
        ) : downloadSuccess ? (
          <span className="flex items-center justify-center">
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path>
            </svg>
            Image Downloaded!
          </span>
        ) : (
          <span className="flex items-center justify-center">
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path>
            </svg>
            Download Image
          </span>
        )}
      </button>

      {orderedKeys.length === 0 && (
        <p className="mt-3 text-sm text-center text-red-500">
          No details selected. Please select details from the customize panel.
        </p>
      )}
    </div>
  );
};

export default ImagePreview;
